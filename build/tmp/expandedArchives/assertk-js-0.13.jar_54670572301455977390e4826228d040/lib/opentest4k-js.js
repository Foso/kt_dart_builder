(function (_, Kotlin) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var toString = Kotlin.toString;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Exception = Kotlin.kotlin.Exception;
  var hashCode = Kotlin.hashCode;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  var AssertionError = Kotlin.kotlin.AssertionError;
  var AssertionError_init = Kotlin.kotlin.AssertionError_init_pdl1vj$;
  var AssertionError_init_0 = Kotlin.kotlin.AssertionError_init;
  var ensureNotNull = Kotlin.ensureNotNull;
  var get_js = Kotlin.kotlin.js.get_js_1yb8b7$;
  var RuntimeException = Kotlin.kotlin.RuntimeException;
  AssertionFailedError.prototype = Object.create(AssertionError.prototype);
  AssertionFailedError.prototype.constructor = AssertionFailedError;
  MultipleFailuresError.prototype = Object.create(AssertionError.prototype);
  MultipleFailuresError.prototype.constructor = MultipleFailuresError;
  IncompleteExecutionException.prototype = Object.create(RuntimeException.prototype);
  IncompleteExecutionException.prototype.constructor = IncompleteExecutionException;
  TestAbortedException.prototype = Object.create(IncompleteExecutionException.prototype);
  TestAbortedException.prototype.constructor = TestAbortedException;
  TestSkippedException.prototype = Object.create(IncompleteExecutionException.prototype);
  TestSkippedException.prototype.constructor = TestSkippedException;
  function ValueWrapper(value) {
    ValueWrapper$Companion_getInstance();
    this.value = value;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.type = (tmp$ = this.value) != null ? Kotlin.getKClassFromExpression(tmp$) : null;
    try {
      tmp$_0 = toString(this.value);
    }
     catch (e) {
      if (Kotlin.isType(e, Exception)) {
        tmp$_0 = '<Exception in toString(): ' + e + '>';
      }
       else
        throw e;
    }
    this.stringRepresentation = tmp$_0;
    this.identityHashCode = (tmp$_2 = (tmp$_1 = this.value) != null ? hashCode(tmp$_1) : null) != null ? tmp$_2 : 0;
  }
  ValueWrapper.prototype.toString = function () {
    var tmp$;
    if (this.type == null) {
      tmp$ = 'null';
    }
     else {
      tmp$ = this.stringRepresentation + ' (' + toString(this.type.simpleName) + '@' + this.identityHashCode + ')';
    }
    return tmp$;
  };
  function ValueWrapper$Companion() {
    ValueWrapper$Companion_instance = this;
    this.nullValueWrapper_0 = new ValueWrapper(null);
  }
  ValueWrapper$Companion.prototype.create_s8jyv4$ = function (value) {
    return value == null ? this.nullValueWrapper_0 : new ValueWrapper(value);
  };
  ValueWrapper$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ValueWrapper$Companion_instance = null;
  function ValueWrapper$Companion_getInstance() {
    if (ValueWrapper$Companion_instance === null) {
      new ValueWrapper$Companion();
    }
    return ValueWrapper$Companion_instance;
  }
  ValueWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ValueWrapper',
    interfaces: []
  };
  function toValueWrapper($receiver) {
    return ValueWrapper$Companion_getInstance().create_s8jyv4$($receiver);
  }
  var get_value = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_value_sgg5br$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  var get_stringRepresentation = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_stringRepresentation_sgg5br$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  var get_identityHashCode = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_identityHashCode_sgg5br$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  function AssertionFailedError() {
    this.name = 'AssertionFailedError';
    this._cause_5vthm9$_0 = null;
    this.expected = null;
    this.actual = null;
  }
  Object.defineProperty(AssertionFailedError.prototype, 'cause', {
    get: function () {
      return this._cause_5vthm9$_0;
    }
  });
  Object.defineProperty(AssertionFailedError.prototype, 'isExpectedDefined', {
    get: function () {
      return this.expected != null;
    }
  });
  Object.defineProperty(AssertionFailedError.prototype, 'isActualDefined', {
    get: function () {
      return this.actual != null;
    }
  });
  AssertionFailedError.prototype.toString = function () {
    var builder = new StringBuilder('AssertionFailedError');
    if (this.message != null) {
      builder.append_gw00v9$(': ').append_gw00v9$(this.message);
    }
    return builder.toString();
  };
  AssertionFailedError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AssertionFailedError',
    interfaces: [AssertionError]
  };
  function AssertionFailedError_init(message, cause, $this) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    $this = $this || Object.create(AssertionFailedError.prototype);
    AssertionFailedError_init_1(message, null, null, cause, $this);
    return $this;
  }
  function AssertionFailedError_init_0(message, expected, actual, cause, $this) {
    if (cause === void 0)
      cause = null;
    $this = $this || Object.create(AssertionFailedError.prototype);
    AssertionFailedError_init_1(message, toValueWrapper(expected), toValueWrapper(actual), cause, $this);
    return $this;
  }
  function AssertionFailedError_init_1(message, expected, actual, cause, $this) {
    $this = $this || Object.create(AssertionFailedError.prototype);
    AssertionError_init(message, $this);
    AssertionFailedError.call($this);
    $this._cause_5vthm9$_0 = cause;
    $this.expected = expected;
    $this.actual = actual;
    return $this;
  }
  var get_isExpectedDefined = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_isExpectedDefined_kc64da$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  var get_isActualDefined = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_isActualDefined_kc64da$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  var get_expected = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_expected_kc64da$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  var get_actual = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_actual_kc64da$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  var isBlank = Kotlin.kotlin.text.isBlank_gw00vp$;
  function MultipleFailuresError(heading, failures) {
    AssertionError_init_0(this);
    this.failures = failures;
    this.name = 'MultipleFailuresError';
    this.heading = heading == null || isBlank(heading) ? 'Multiple Failures' : ensureNotNull(heading);
  }
  Object.defineProperty(MultipleFailuresError.prototype, 'message', {
    get: function () {
      var tmp$;
      var failureCount = this.failures.size;
      if (failureCount === 0) {
        return this.heading;
      }
      var tmp$_0 = (new StringBuilder(this.heading)).append_gw00v9$(' (').append_s8jyv4$(failureCount).append_gw00v9$(' ');
      var plural = 'failures';
      var builder = tmp$_0.append_gw00v9$(failureCount === 1 ? 'failure' : plural).append_gw00v9$(')\n');
      var lastIndex = failureCount - 1 | 0;
      tmp$ = this.failures.subList_vux9f0$(0, lastIndex).iterator();
      while (tmp$.hasNext()) {
        var failure = tmp$.next();
        builder.append_gw00v9$('\t').append_gw00v9$(nullSafeMessage(failure)).append_gw00v9$('\n');
      }
      builder.append_s8itvh$(9).append_gw00v9$(nullSafeMessage(this.failures.get_za3lpa$(lastIndex)));
      return builder.toString();
    }
  });
  MultipleFailuresError.prototype.hasFailures = function () {
    return !this.failures.isEmpty();
  };
  MultipleFailuresError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MultipleFailuresError',
    interfaces: [AssertionError]
  };
  function pluralize(count, singular, plural) {
    return count === 1 ? singular : plural;
  }
  function nullSafeMessage(failure) {
    var $receiver = failure.message;
    if ($receiver == null || isBlank($receiver)) {
      return '<no message> in ' + get_js(Kotlin.getKClassFromExpression(failure)).name;
    }
    return ensureNotNull(failure.message);
  }
  var get_failures = defineInlineFunction('opentest4k-js.com.willowtreeapps.opentest4k.get_failures_f9bl0c$', wrapFunction(function () {
    var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
    return function ($receiver) {
      throw new NotImplementedError_init();
    };
  }));
  function IncompleteExecutionException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    RuntimeException.call(this, message, cause);
    this.name = 'IncompleteExecutionException';
  }
  IncompleteExecutionException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IncompleteExecutionException',
    interfaces: [RuntimeException]
  };
  function TestAbortedException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    IncompleteExecutionException.call(this, message, cause);
    this.name = 'TestAbortedException';
  }
  TestAbortedException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TestAbortedException',
    interfaces: [IncompleteExecutionException]
  };
  function TestSkippedException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    IncompleteExecutionException.call(this, message, cause);
    this.name = 'TestSkippedException';
  }
  TestSkippedException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TestSkippedException',
    interfaces: [IncompleteExecutionException]
  };
  Object.defineProperty(ValueWrapper, 'Companion', {
    get: ValueWrapper$Companion_getInstance
  });
  var package$com = _.com || (_.com = {});
  var package$willowtreeapps = package$com.willowtreeapps || (package$com.willowtreeapps = {});
  var package$opentest4k = package$willowtreeapps.opentest4k || (package$willowtreeapps.opentest4k = {});
  package$opentest4k.ValueWrapper = ValueWrapper;
  package$opentest4k.toValueWrapper_mzud1t$ = toValueWrapper;
  package$opentest4k.get_value_sgg5br$ = get_value;
  package$opentest4k.get_stringRepresentation_sgg5br$ = get_stringRepresentation;
  package$opentest4k.get_identityHashCode_sgg5br$ = get_identityHashCode;
  package$opentest4k.AssertionFailedError_init_wspj0f$ = AssertionFailedError_init;
  package$opentest4k.AssertionFailedError_init_8f3c9$ = AssertionFailedError_init_0;
  package$opentest4k.AssertionFailedError = AssertionFailedError;
  package$opentest4k.get_isExpectedDefined_kc64da$ = get_isExpectedDefined;
  package$opentest4k.get_isActualDefined_kc64da$ = get_isActualDefined;
  package$opentest4k.get_expected_kc64da$ = get_expected;
  package$opentest4k.get_actual_kc64da$ = get_actual;
  $$importsForInline$$['opentest4k-js'] = _;
  package$opentest4k.MultipleFailuresError = MultipleFailuresError;
  package$opentest4k.get_failures_f9bl0c$ = get_failures;
  package$opentest4k.IncompleteExecutionException = IncompleteExecutionException;
  package$opentest4k.TestAbortedException = TestAbortedException;
  package$opentest4k.TestSkippedException = TestSkippedException;
  Kotlin.defineModule('opentest4k-js', _);
  return _;
}(module.exports, require('kotlin')));

//# sourceMappingURL=opentest4k-js.js.map
